# frozen_string_literal: true

n = 100
queries = [
  [1, 345_255_357, 205_970_905],
  [1, 570_256_166, 75_865_401],
  [1, 94_777_800, 645_102_173],
  [1, 227_496_730, 16_649_450],
  [1, 82_987_157, 486_734_305],
  [1, 917_920_354, 757_848_208],
  [1, 61_379_773, 817_694_251],
  [1, 330_547_128, 112_869_154],
  [1, 328_743_001, 855_677_723],
  [1, 407_951_306, 669_798_718],
  [1, 21_506_172, 676_980_108],
  [1, 49_911_390, 342_109_400],
  [1, 980_306_253, 305_632_965],
  [2, 736_380_701, 402_184_046],
  [2, 798_108_301, 416_334_323],
  [1, 254_839_279, 1_370_035],
  [1, 109_701_362, 2_800_586],
  [1, 374_257_441, 165_208_824],
  [1, 624_259_835, 477_431_250],
  [1, 629_066_664, 454_406_245],
  [1, 135_821_145, 763_845_832],
  [1, 480_298_791, 138_234_911],
  [1, 553_575_409, 835_718_837],
  [1, 13_022_848, 624_652_920],
  [1, 974_893_519, 882_630_870],
  [1, 137_832_930, 216_177_975],
  [1, 453_349_691, 969_255_659],
  [1, 138_396_076, 91_038_209],
  [1, 699_822_497, 941_751_038],
  [1, 116_800_806, 64_071_662],
  [1, 815_273_934, 8_835_809],
  [1, 658_534_867, 657_771_609],
  [1, 183_760_807, 179_377_441],
  [1, 93_984_556, 636_425_656],
  [1, 231_506_463, 836_238_924],
  [1, 214_074_594, 709_571_211],
  [1, 649_641_434, 509_698_468],
  [2, 523_656_673, 709_717_705],
  [2, 261_443_586, 330_808_140],
  [1, 75_924_023, 449_768_243],
  [1, 849_537_714, 354_568_873],
  [2, 641_743_742, 124_196_560],
  [1, 19_829_224, 995_759_639],
  [1, 244_389_335, 108_315_212],
  [1, 877_758_467, 421_383_626],
  [1, 573_278_148, 474_192_994],
  [2, 561_031_511, 448_889_978],
  [1, 773_294_404, 980_994_962],
  [2, 33_088_709, 716_646_168],
  [1, 760_927_835, 441_983_538],
  [1, 273_540_687, 783_321_829],
  [1, 5_933_845, 384_358_662],
  [1, 543_628_702, 372_160_176],
  [2, 136_400_466, 910_559_291],
  [2, 546_568_738, 393_221_347],
  [1, 812_227_065, 694_221_123],
  [1, 311_065_574, 103_905_420],
  [2, 571_344_361, 185_289_590],
  [1, 99_638_520, 173_318_136],
  [1, 854_060_080, 407_068_012],
  [2, 980_658_213, 778_573_744],
  [2, 412_539_660, 476_853_104],
  [1, 530_145_366, 36_493_537],
  [1, 604_875_364, 100_141_497],
  [2, 650_812_104, 64_817_757],
  [1, 141_060_009, 766_603_553],
  [1, 598_398_952, 418_245_941],
  [1, 262_344_011, 431_865_586],
  [2, 56_413_893, 546_484_833],
  [1, 400_736_735, 673_588_153],
  [1, 642_955_232, 803_851_098],
  [1, 917_782_037, 935_143_105],
  [1, 658_284_524, 745_224_102],
  [1, 103_202_288, 501_551_287],
  [1, 162_144_918, 12_888_783],
  [1, 16_486_753, 67_467_208],
  [1, 671_120_703, 941_541_277],
  [1, 47_399_694, 77_707_668],
  [1, 122_011_395, 946_116_527],
  [1, 924_363_862, 886_726_236],
  [2, 657_761_235, 540_240_467],
  [1, 203_175_991, 279_882_007],
  [2, 304_620_923, 162_838_413],
  [1, 440_453_449, 117_964_712],
  [2, 941_868_853, 887_850_334],
  [1, 293_198_923, 466_812_643],
  [1, 461_688_477, 532_794_906],
  [1, 315_016_797, 733_095_902],
  [1, 265_008_751, 913_972_757],
  [1, 887_405_255, 139_170_948],
  [2, 754_223_230, 426_836_947],
  [1, 945_967_814, 852_589_735],
  [1, 168_866_283, 309_720_694],
  [1, 373_861_145, 94_596_540],
  [2, 984_122_495, 20_702_849],
  [2, 233_835_636, 180_460_242],
  [1, 172_787_631, 643_823_473],
  [1, 273_611_372, 616_819_555],
  [1, 196_104_599, 690_080_895],
  [1, 527_554_061, 434_103_342]
]

def dynamicArray(n, queries)
  arr = Array.new(n) { [] }
  last_answer = 0
  arr_result = []

  queries.each do |val|
    index = ((val[1] ^ last_answer) % n)
    if val[0] == 1
      arr[index].push(val[2])
    else
      z = val[2] % arr[index].length
      last_answer = arr[index][z]
      arr_result.push(last_answer)
    end
  end
  puts arr_result
end

dynamicArray(n, queries)
